#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: moveGeos57
#
# !DESCRIPTION: This Perl script is used to move GEOS-5.7.2 files for
#  from the scratch directory space to the GEOS-Chem data directory space.
#\\
#\\
# !USES:
#
  require 5.003;        # need this version of Perl or newer
  use strict 'refs';    # Do not allow symbolic references
  use strict 'subs';    # Treat all barewords as syntax errors 
#
# !PUBLIC MEMBER FUNCTIONS:
#
# getDefaults($$)
# getDirectories($)
# getSysVars()
# replaceTokens($)
# checkDir($)
# moveFiles()
# main()
#
# !PUBLIC DATA MEMBERS:
#
  #============================================================
  # Define global variables (seen in all subroutines below)
  #============================================================
				
  # General variables
  $DAY_STRING        = "UNDEFINED";
  $DEFAULTS_FOR_EXE  = "UNDEFINED";
  $HOME_DIRECTORY    = "UNDEFINED";
  $MONTH_STRING      = "UNDEFINED";
  $USER_ID           = "UNDEFINED";
  $YEAR_STRING       = "UNDEFINED";
			       
  # Data file names and directories
  $DATA_FILE_NEST_CH = "UNDEFINED";
  $TEMP_DIR_NEST_CH  = "UNDEFINED";
  $DATA_DIR_NEST_CH  = "UNDEFINED";
  $DATA_FILE_NEST_NA = "UNDEFINED";
  $TEMP_DIR_NEST_NA  = "UNDEFINED";
  $DATA_DIR_NEST_NA  = "UNDEFINED";
  $DATA_FILE_2x25    = "UNDEFINED";
  $TEMP_DIR_2x25     = "UNDEFINED";
  $DATA_DIR_2x25     = "UNDEFINED";
  $DATA_FILE_4x5     = "UNDEFINED";
  $TEMP_DIR_4x5      = "UNDEFINED";
  $DATA_DIR_4x5      = "UNDEFINED";
#
# !CALLING SEQUENCE:
# moveGeos57 YYYYMMDD
#
# !REVISION HISTORY: 
#  23 Jan 2012 - R. Yantosca - Initial version
#  16 Feb 2012 - R. Yantosca - Updated for NA nested grid
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDefaults
#
# !DESCRIPTION:  Routine getDefaults reads the default values for 
#  input quantities.
#\\
#\\
# !INTERFACE:
#
sub getDefaults($$) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  # $date     : YYYYMMDD date for which to process met data
  my ( $fileName, $date ) = @_;
#
# !CALLING SEQUENCE:
# &getDefaults( FILENAME, DATE );
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Local variables
  my $line         = "";   
  my @file         = "";
  my @result       = "";

  #--------------------------------------
  # Read variable settings from the file
  #--------------------------------------

  # Read defaults file into an array (remove newlines)
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Loop thru each line in the file
  for ( my $i = 0; $i <  scalar( @file ); $i++ ) {

    if ( $file[$i] =~ "==> Defaults for Executable" ) {
      $DEFAULTS_FOR_EXE = $file[++$i];
    }

  }

  # Date strings
  $YEAR_STRING  = substr( $date, 0, 4 );
  $MONTH_STRING = substr( $date, 4, 2 );
  $DAY_STRING   = substr( $date, 6, 2 );

  # Return normally
  return(0);
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDirectories
#
# !DESCRIPTION:  Routine getDirectories reads the file and directory paths
#  from the input file for the GEOS-5.7.2 Fortran executable.
#\\
#\\
# !INTERFACE:
#
sub getDirectories($) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  my ( $fileName ) = @_;
#
# !CALLING SEQUENCE:
# &getDirectories( FILENAME )
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#  16 Feb 2012 - R. Yantosca - Updated for NA nested grid
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $line     = "";   
  my @file     = "";
  my $skipLine = "";

  #--------------------------------------
  # Read variable settings from the file
  #--------------------------------------

  # Read defaults file into an array (remove newlines)
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Loop thru each line in the file
  for ( my $i = 0; $i < scalar( @file ); $i++ ) {

    if ( $file[$i] =~ "==> Nested China output" ) {
      $skipLine          = $file[++$i];
      $DATA_FILE_NEST_CH = $file[++$i];
      $TEMP_DIR_NEST_CH  = $file[++$i];
      $DATA_DIR_NEST_CH  = $file[++$i];

    } elsif ( $file[$i] =~ "==> Nested NA output" ) {
      $skipLine          = $file[++$i];
      $DATA_FILE_NEST_NA = $file[++$i];
      $TEMP_DIR_NEST_NA  = $file[++$i];
      $DATA_DIR_NEST_NA  = $file[++$i];

###############################################################################
# Leave room for future expansion (bmy, 1/23/12)      
#    } elsif ( $file[$i] =~ "==> Nested Europe output" ) {
#      $skipLine          = $file[++$i];
#      $DATA_FILE_NEST_CH = $file[++$i];
#      $TEMP_DIR_NEST_CH  = $file[++$i];
#      $DATA_DIR_NEST_CH  = $file[++$i];
###############################################################################

    } elsif ( $file[$i] =~ "==> 2 x 2.5 output" ) {
      $skipLine          = $file[++$i];
      $DATA_FILE_2x25    = $file[++$i];
      $TEMP_DIR_2x25     = $file[++$i];
      $DATA_DIR_2x25     = $file[++$i];

    } elsif ( $file[$i] =~ "==> 4 x 5 output" ) {
      $skipLine          = $file[++$i];
      $DATA_FILE_4x5     = $file[++$i];
      $TEMP_DIR_4x5      = $file[++$i];
      $DATA_DIR_4x5      = $file[++$i];

    }
  }

  # Return normally
  return(0);
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getSysVars
#
# !DESCRIPTION: Routine getSysVars returns system variables \$USER and \$HOME.
#\\
#\\
# !INTERFACE:
#
sub getSysVars() {
#
# !CALLING SEQUENCE:
# &getSysVars();
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC

  # User ID (remove newline)
  $USER_ID = qx( echo \$USER );
  chomp( $USER_ID );
  
  # Home directory (remove newline)
  $HOME_DIRECTORY = qx( echo \$HOME );
  chomp( $HOME_DIRECTORY );

  # Return normally
  return(0);
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: replaceTokens
#
# !DESCRIPTION: Subroutine replaceTokens replaces tokens in a variable.  
#\\
#\\
# !INTERFACE:
#
sub replaceTokens($$) {
#
# !INPUT PARAMETERS:
#
  # $var: Name of the string in which to replace tokens
  my ( $var, $fileType ) = @_; 
#
# !CALLING SEQUENCE:
#  $var = &replaceTokens( $var );
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#  23 Jan 2012 - R. Yantosca - Added $fileType argument
#EOP
#------------------------------------------------------------------------------
#BOC

  # Replace tokens in the variable names
  $var =~ s/{HOME}/$HOME_DIRECTORY/g;
  $var =~ s/{USER}/$USER_ID/g;
  $var =~ s/YYYY/$YEAR_STRING/g;
  $var =~ s/MM/$MONTH_STRING/g;
  $var =~ s/DD/$DAY_STRING/g;
  $var =~ s/%%%%%%/$fileType/g;
 
  # Return to calling program
  return( $var );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: checkDir
#
# !DESCRIPTION: Subroutine checkDir checks to see if a directory exists.
#\\
#\\
# !INTERFACE:
#
sub checkDir($) {
#
# !INPUT PARAMETERS:
#
  # $dir : Directory to be checked
  my ( $dir ) = @_;
#
# !CALLING SEQUENCE:
#  &checkDir( $dir );
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC

  # Stop with error if directory doesn't exist
  if ( !( -d $dir ) ) { 
    print "doGeos5 ERROR: Directory does not exist: $dir\n";
    exit(1)
  }
  
  # Otherwise return normally
  return(0);
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: moveFiles
#
# !DESCRIPTION: Subroutine moveFiles moves the processed GEOS-5.7.2 met field 
#  files from the temporary directory to the data directory.
#\\
#\\
# !INTERFACE:
#
sub moveFiles(@) {
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#  16 Feb 2012 - R. Yantosca - Updated for Nested NA grid
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $cmd      = "";
  my $dir      = ""; 
  my $mask     = "";
  my $result   = "";
  my $fileType = "";

  # Skip the first argument, which is the date
  for ( my $i=1; $i<=$#ARGV; $i++ ) {
    
    # Get the file type (e.g. CN, A1, etc.)
    $fileType = $_[$i];

    #-------------------------------
    # SEA4CRS nested China grid 
    #-------------------------------

    # Temporary file mask
    $mask   = "$TEMP_DIR_NEST_CH$DATA_FILE_NEST_CH";
    $mask   = &replaceTokens( $mask, $fileType );
  
    # Data directory path
    $dir    = "$DATA_DIR_NEST_CH";
    $dir    = &replaceTokens( $dir, $fileType );
    &checkDir( $dir );

    # Move command (list the directory first to force an automount)
    $cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
    # Move the files
    print "$cmd\n";
    $result = qx( $cmd );


    #-------------------------------
    # Nested N. America grid
    #-------------------------------

    # Temporary file mask
    $mask   = "$TEMP_DIR_NEST_NA$DATA_FILE_NEST_NA";
    $mask   = &replaceTokens( $mask, $fileType );
  
    # Data directory path
    $dir    = "$DATA_DIR_NEST_NA";
    $dir    = &replaceTokens( $dir, $fileType );
    &checkDir( $dir );

    # Move command (list the directory first to force an automount)
    $cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
    # Move the files
    print "$cmd\n";
    $result = qx( $cmd );

    #-------------------------------
    # 2 x 2.5 global grid
    #-------------------------------

    # File path to temporary directory
    $mask   = "$TEMP_DIR_2x25$DATA_FILE_2x25";
    $mask   = &replaceTokens( $mask, $fileType );
    
    # File path to data directory
    $dir    = "$DATA_DIR_2x25";
    $dir    = &replaceTokens( $dir, $fileType );
    &checkDir( $dir );    

    # Move command (list the directory first to force an automount)
    $cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
    # Move the files
    print "$cmd\n";
    $result = qx( $cmd );
    
    #-------------------------------
    # 4 x 5 global grid
    #-------------------------------
    
    # File path to temporary directory
    $mask   = "$TEMP_DIR_4x5$DATA_FILE_4x5";
    $mask   = &replaceTokens( $mask, $fileType );
    
    # File path to data directory
    $dir    = "$DATA_DIR_4x5";
    $dir    = &replaceTokens( $dir, $fileType );
    &checkDir( $dir );    

    # Move command (list the directory first to force an automount)
    $cmd    = "ls $dir > /dev/null; mv -f $mask $dir";

    # Move the files
    print "$cmd\n";
    $result = qx( $cmd );

  }

  # Return normally
  return( 0 );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Routine main is the driver routine for the moveGeos57 script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  &main();
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------

  # Error check arguments
  if ( scalar( @ARGV ) == 0 ) { 
    print "Usage: moveGeos57 YYYYMMDD FILETYPE\n"; 
    exit(1);
  }

  # Get default values
  &getDefaults( "doGeos57.input", $ARGV[0] );

  # Get data & temporary directories
  &getDirectories( $DEFAULTS_FOR_EXE );

  # Get system variables
  &getSysVars();

  # Run jobs
  &moveFiles( @ARGV );

  # Return normally
  return(0);
}
#EOC

#------------------------------------------------------------------------------

# Start main program
main();

# Exit normally
exit(0);
