#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: getGeos57Cn
#
# !DESCRIPTION: Perl script getGeos57 produces the proper URL's that are
#  used to request GEOS-5.7.x data downloads from the GES-DISC.  It also
#  uses the "curl" program to submit the URL's to the GES-DISC data server
#  using the HTTP protocol.
#\\
#\\
#  NOTE: This script downloads the CONSTANT "CN" data file, which is 
#  timestamped with date 0000/00/00 and time 00:00:00.
#\\
#\\
# !USES:
#
  require 5.003;                  # Need this version of Perl or newer
  use strict;                     # Force strict syntax rules
  use Dates qw( &getLocalTime );  # Date & time functions
#
# !PUBLIC MEMBER FUNCTIONS:
#  &getDefaults($$) 
#  &getGeos57Data($)
#  &main()      
#
# !CALLING SEQUENCE:
#  getGeos57Cn                    # Download GEOS-5.7.2 "CONSTANT" data file
#
# !REMARKS:
#  Validated 10/25/11 by Bob Yantosca
#
# !REVISION HISTORY: 
#  25 Oct 2011 - R. Yantosca - Initial version, based on getGeos57
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDefaults
#
# !DESCRIPTION:  Routine getDefaults returns the login string and met data
#  type string that are needed by getGeos5Data.
#\\
#\\
# !INTERFACE:
#
sub getDefaults($$) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  # $date     : YYYYMMDD date for which to process met data
  my ( $fileName, $date ) = @_;
#
# !RETURN VALUE:
#
  my $login   = "";  # Login string
  my $metType = "";  # Type string for GEOS-5.1.0 or GEOS-5.2.0 data
#
# !CALLING SEQUENCE:
# ( $login, $metType ) = &getDefaults( $fileName, $date );
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/getGeos5
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my @file    = "";
###############################################################################
# FOR NOW, KEEP THIS CODE HERE, IN CASE GMAO UPDATES THE VERSION # AGAIN 
# AND WE HAVE DIFFERENT VERSION #'s for DIFFERENT DATES (bmy, 10/24/11)
#  my $jd0     = 0;
#  my $jd1     = 0;
#  my $y1      = 0;
#  my $m1      = 0;
#  my $d1      = 0;
###############################################################################
 
  #--------------------------------------------------------------------------
  # Read default settings for global variables from the input file
  #--------------------------------------------------------------------------

  # Read input file into an array
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Parse thru each line until we find the login string
  for ( my $i = 0; $i < scalar( @file ); $i++ ) {
    if ( $file[$i] =~ "==> Login String" ) { $login = $file[++$i]; }
  }

  #--------------------------------------------------------------------------
  # Compute the met field type
  #--------------------------------------------------------------------------

  # As of Oct 2011, there is only one met field type (this may change)
  $metType = '&version=5.7.2';

###############################################################################
# FOR NOW, KEEP THIS CODE HERE, IN CASE GMAO UPDATES THE VERSION # AGAIN 
# AND WE HAVE DIFFERENT VERSION #'s for DIFFERENT DATES (bmy, 10/24/11)
#
#  # Astronomical Julian date for 2008/01/01 
#  # (1st day of GEOS-5.2.0 data that we use)
#  $jd0 = &julDay( 2008, 9, 1 );
#
#  # Astronomical Julian Date for the current date
#  ( $y1, $m1, $d1 ) = &ymdExtract( $date );
#  $jd1 = &julDay( $y1, $m1, $d1 );
#
#  # Construct the date string
#  if ( $jd1 >= $jd0 ) { $metType = '&version=5.2.0'; }
#  else                { $metType = '&version=5.1.0'; }
###############################################################################

  # Return 
  return( $login, $metType );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getGeos57CnData
#
# !DESCRIPTION: Routine getGeos57CnData creates the URL's for the GEOS-5.7.x
#  "CONSTANT" data file.  The URL's are then submitted via the Unix "curl"
#  program to schedule the download.
#\\
#\\
# !INTERFACE:
#
sub getGeos57CnData($) {
#
# !INPUT PARAMETERS:
#
  my ( $printOnly ) = @_;   # If =1, then print URL's but don't download
#
# !CALLING SEQUENCE:
#  &getGeos57CnData();   
#
# !REVISION HISTORY:
#  25 Oct 2011 - R. Yantosca - Initial version, based on getGeos57
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Start time & date for downloading data
  my $d0     = "0000-00-00";
  my $t0     = "00:00:00";

  # End time & date for downloading data
  my $d1     = "0000-00-00";
  my $t1     = "01:00:00";

  # Other variables
  my $url    = "";
  my $msg    = "";
  my $cmd    = "";
  my $status = 0;

  # Read the "doGeos5.input" file for the login and version strings
  my ( $login, $vStr ) = &getDefaults( "doGeos57.input", 00000000 );

  #--------------------------------------------------------------------------
  # Download const_2d_asm_Nx file
  #--------------------------------------------------------------------------

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57C0NXASM"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of const_2d_asm_Nx:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #--------------------------------------------------------------------------
  # Print info & return
  #--------------------------------------------------------------------------

  # Print the overall status code to stdout & log before exiting
  $msg = &getLocalTime();
  print     "\nOverall status code: $status\n\nExiting at $msg\n";

  # Return status (i.e. # of processes that failed)
  return( $status );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Main is the driver program for the getGeos5 script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  &main();
#
# !REVISION HISTORY:
#  25 Oct 2011 - R. Yantosca - Initial version, based on getGeos57
#EOP
#------------------------------------------------------------------------------
#BOC

  # Auto request data download.  Pass proper # of arguments
  if   ( scalar( @ARGV ) == 1 ) { &getGeos57CnData( @ARGV ); }
  else                          { &getGeos57CnData( 0     ); }

  # Return exit status
  return( $? );
}
#EOC

#------------------------------------------------------------------------------

# Call main driver routine
main();

# Exit and pass status code to Unix shell
exit( $? );
