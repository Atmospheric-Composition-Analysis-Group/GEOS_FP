#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: getGeos57
#
# !DESCRIPTION: Perl script getGeos5 produces the proper URL's that are
#  used to request GEOS-5 data downloads from the GES-DISC.  It also
#  uses the "curl" program to submit the URL's to the GES-DISC data server
#  using the HTTP protocol.
#\\
#\\
# !USES:
#
  require 5.003;                  # Need this version of Perl or newer
  use strict;                     # Force strict syntax rules
  use Dates qw( &addDate 
                &getLocalTime 
                &julDay  
                &ymdExtract   );  # Date & time functions
#
# !PUBLIC MEMBER FUNCTIONS:
# &getDefaults($$) 
# &getGeos5Data($$)
# &main         
#
# !CALLING SEQUENCE:
# getGeos5 20110101              # Gets data for 20110101
# getGeos5 20110101 20110103     # Gets data for 20110101 - 20110103
# getGeos5 20110101 20110103 1   # Displays URL's used in data request 
#                                #  but does not download any data
#
# !REVISION HISTORY: 
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/getGeos5
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDefaults
#
# !DESCRIPTION:  Routine getDefaults returns the login string and met data
#  type string that are needed by getGeos5Data.
#\\
#\\
# !INTERFACE:
#
sub getDefaults($$) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  # $date     : YYYYMMDD date for which to process met data
  my ( $fileName, $date ) = @_;
#
# !RETURN VALUE:
#
  my $login   = "";  # Login string
  my $metType = "";  # Type string for GEOS-5.1.0 or GEOS-5.2.0 data
#
# !CALLING SEQUENCE:
# ( $login, $metType ) = &getDefaults( $fileName, $date );
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/getGeos5
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my @file    = "";
###############################################################################
# FOR NOW, KEEP THIS CODE HERE, IN CASE GMAO UPDATES THE VERSION # AGAIN 
# AND WE HAVE DIFFERENT VERSION #'s for DIFFERENT DATES (bmy, 10/24/11)
#  my $jd0     = 0;
#  my $jd1     = 0;
#  my $y1      = 0;
#  my $m1      = 0;
#  my $d1      = 0;
###############################################################################
 
  #--------------------------------------
  # Read variable settings from the file
  #--------------------------------------

  # Read input file into an array
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Parse thru each line until we find the login string
  for ( my $i = 0; $i < scalar( @file ); $i++ ) {
    if ( $file[$i] =~ "==> Login String" ) { $login = $file[++$i]; }
  }

  #--------------------------------------
  # Compute the met field type
  #--------------------------------------

  # As of Oct 2011, there is only one met field type (this may change)
  $metType = '&version=5.7.2';

###############################################################################
# FOR NOW, KEEP THIS CODE HERE, IN CASE GMAO UPDATES THE VERSION # AGAIN 
# AND WE HAVE DIFFERENT VERSION #'s for DIFFERENT DATES (bmy, 10/24/11)
#
#  # Astronomical Julian date for 2008/01/01 
#  # (1st day of GEOS-5.2.0 data that we use)
#  $jd0 = &julDay( 2008, 9, 1 );
#
#  # Astronomical Julian Date for the current date
#  ( $y1, $m1, $d1 ) = &ymdExtract( $date );
#  $jd1 = &julDay( $y1, $m1, $d1 );
#
#  # Construct the date string
#  if ( $jd1 >= $jd0 ) { $metType = '&version=5.2.0'; }
#  else                { $metType = '&version=5.1.0'; }
###############################################################################

  # Return 
  return( $login, $metType );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getGeos5Data
#
# !DESCRIPTION: Routine getGeos5Data creates the URL's for each of the 
#  GEOS-5 met data file types that you can use when requesting data via 
#  GES-DISC web interface.  The URL's are then submitted via the Unix "curl"
#  program.
#\\
#\\
# !INTERFACE:
#
sub getGeos5Data($$$) {
#
# !INPUT PARAMETERS:
#
  # $date0 : YYYY/MM/DD dates at the start
  # $date1 :  and end of the period for which you want to get data
  my ( $date0, $date1, $printOnly ) = @_;
#
# !CALLING SEQUENCE:
#  &createGeos5Urls( 20080101 20080108 );   
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/getGeos5
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Variables for today
  my $year     = substr( $date0, 0, 4 );
  my $month    = substr( $date0, 4, 2 );
  my $day      = substr( $date0, 6, 2 );

  # Variables for today
  my $date_p   = &addDate( $date0, -1 );
  my $year_p   = substr( $date_p, 0, 4 );
  my $month_p  = substr( $date_p, 4, 2 );
  my $day_p    = substr( $date_p, 6, 2 );

  # Variables for the last day
  my $date_n   = &addDate( $date1, 1 );
  my $year_n   = substr( $date_n, 0, 4 );
  my $month_n  = substr( $date_n, 4, 2 );
  my $day_n    = substr( $date_n, 6, 2 );

  # Other variables
  my $d0       = ""; 
  my $t0       = ""; 
  my $d1       = ""; 
  my $t1       = ""; 
  my $url      = "";
  my $msg      = "";
  my $cmd      = "";
  my $status   = 0;

  # Read the "doGeos5.input" file for the login and version strings
  my ( $login, $vStr ) = &getDefaults( "doGeos57.input", $date0 );

  #-------------------------
  # tavg1_2d_flx_Nx file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T1NXFLX$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg1_2d_flx_Nx for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg1_2d_rad_Nx file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T1NXRAD$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg1_2d_rad_Nx for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg1_2d_lnd_Nx file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T1NXLND$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg1_2d_lnd_Nx for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg1_2d_ocn_Nx file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T1NXOCN$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg1_2d_ocn_Nx for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }


  #-------------------------
  # tavg1_2d_slv_Nx file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T1NXSLV$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg1_2d_slv_Nx for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # inst3_3d_asm_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57I3NVASM$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of inst3_3d_asm_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_cld_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NVCLD$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_cld_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_odt_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NVODT$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_odt_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_qdt_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NVQDT$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_qdt_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_udt_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NVUDT$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_udt_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_rad_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NVRAD$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_rad_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_mst_Nv file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NVMST$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_mst_Nv for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  #-------------------------
  # tavg3_3d_mst_Ne file
  #-------------------------

  # Start date & time
  $d0  = "$year-$month-$day";
  $t0  = "00:00:00";
  
  # End date & time
  $d1  = "$year_n-$month_n-$day_n";
  $t1  = "00:00:00";

  # Create URL (place single quotes around it)
  $url = "'"."http://aurapar2u.ecs.nasa.gov/goldsfs1/ops-bin/s4pa_m2m_cgi.pl?dataset=D57T3NEMST$vStr&startTime=$d0%20$t0&endTime=$d1%20$t1"."'";

  # Create curl command string
  $cmd ="curl --silent -u $login $url";

  # Echo info to both stdout and log file
  print "\nDownload of tavg3_3d_mst_Ne for $date0 - $date1:\n$msg\n";

  # Issue data transfer request via curl  
  if ( $printOnly ) { print "   $cmd\n\n"; }
  else              { $msg = qx( $cmd );   }

  # Increment status flag upon failure
  if ( $msg =~ "failure" ) { $status++; }

  # Print the overall status code to stdout & log before exiting
  $msg = &getLocalTime();
  print     "\nOverall status code: $status\n\nExiting at $msg\n";

  # Exit normally
  return( $status );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Main is the driver program for the getGeos5 script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  &main();
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/getGeos5
#EOP
#------------------------------------------------------------------------------
#BOC

  # Error message
  my $errMsg = "Usage: getGeos57 YYYYMMDD [ YYYYMMDD [ {0|1} ] ]\n";

  # Create the GEOS-5 URL's for auto data request
  # Pass the proper # of arguments
  if    ( scalar( @ARGV ) == 3 ) { &getGeos5Data( @ARGV                 );  }
  elsif ( scalar( @ARGV ) == 2 ) { &getGeos5Data( $ARGV[0], $ARGV[1], 0 );  } 
  elsif ( scalar( @ARGV ) == 1 ) { &getGeos5Data( $ARGV[0], $ARGV[0], 0 );  }
  else                           { print "$errMsg\n"; exit(1);              }
 
  # Return normally
  return( $? );
}
#EOC

# Call main driver routine
main();

# Exit and pass status code to Unix shell
exit( $? );
